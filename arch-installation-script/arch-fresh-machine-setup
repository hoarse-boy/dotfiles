#!/usr/bin/env bash
# Arch Linux Fresh Machine Setup Script

# -------------------------------
# Configuration
# -------------------------------
set -uo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Directories
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INSTALL_DIR="${INSTALL_DIR:-$HOME/my-dotfiles}"
LOG_DIR="$INSTALL_DIR/logs"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/setup-$(date +%Y%m%d-%H%M%S).log"

# -------------------------------
# Logging Setup
# -------------------------------
{
  echo -e "\n=== START: $(date) ==="
  echo "Installation log: $LOG_FILE"

  # Save original stdout/stderr
  exec 3>&1 4>&2

  # Tee output to log file (without color codes)
  exec > >(
    tee -i >(
      while IFS= read -r line; do
        printf '[%s] %s\n' "$(date '+%Y-%m-%d %H:%M:%S')" \
          "$(echo "$line" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g")"
      done >>"$LOG_FILE"
    )
  ) 2>&1
}

# -------------------------------
# Functions
# -------------------------------
log_separator() {
  echo -e "\n${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
}

check_ml4w_dotfiles() {
  local dotfiles_dir="$HOME/.ml4w-hyprland"

  if [[ ! -d "$dotfiles_dir" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è WARNING: ml4w dotfiles folder not found!${NC}"
    echo ""
    echo -e "${RED}Continuing without it may cause unexpected behavior.${NC}"

    select choice in "Continue" "Abort"; do
      case "$choice" in
      "Continue") return 0 ;;
      "Abort") exit 1 ;;
      *) echo "Invalid choice" ;;
      esac
    done
  else
    echo -e "${GREEN}‚úÖ Found ml4w dotfiles${NC}"
  fi
}

install_packages() {
  echo -e "\n${BLUE}=== Installing Packages ===${NC}"
  local pkg_script="${SCRIPT_DIR}/install-packages/install-packages.sh"

  if [[ -f "$pkg_script" ]]; then
    if bash "$pkg_script"; then
      echo -e "${GREEN}‚úì Packages installed${NC}"
    else
      echo -e "${RED}‚ùå Package installation failed${NC}"
      return 1
    fi
  else
    echo -e "${RED}‚ùå Package installer missing${NC}"
    return 1
  fi
}

run_scripts() {
  echo -e "\n${BLUE}=== Running Configuration Scripts ===${NC}"
  local error_count=0
  FAILED_SCRIPTS=()

  for script in "${SCRIPT_DIR}/scripts/"*.sh; do
    if [[ -f "$script" ]]; then
      script_name=$(basename "$script")

      [[ "$script_name" == *"test.sh" && "${DEBUG:-false}" != "true" ]] && continue

      echo -e "${YELLOW}‚û°Ô∏è Running: ${script_name}${NC}"

      if ! bash "$script"; then
        echo -e "${RED}‚ùå Failed: ${script_name}${NC}"
        FAILED_SCRIPTS+=("$script_name")
        ((error_count++))

        select choice in "Continue" "Retry" "Abort"; do
          case $choice in
          "Continue") break ;;
          "Retry")
            if bash "$script"; then
              ((error_count--))
              unset 'FAILED_SCRIPTS[-1]'
              break
            fi
            ;;
          "Abort") exit 1 ;;
          *) echo "Invalid option" ;;
          esac
        done
      fi
    fi
  done

  # Report failed scripts to parent
  if [[ ${#FAILED_SCRIPTS[@]} -gt 0 ]]; then
    printf "%s\n" "${FAILED_SCRIPTS[@]}" > /tmp/b-failed.txt
  else
    rm -f /tmp/b-failed.txt
  fi

  return $error_count
}

# -------------------------------
# Main Execution
# -------------------------------
main() {
  local critical_errors=0

  echo -e "${GREEN}üîß Starting System Setup üîß${NC}"
  log_separator

  check_ml4w_dotfiles || ((critical_errors++))
  log_separator

  install_packages || ((critical_errors++))
  log_separator

  run_scripts || ((critical_errors++))
  log_separator

  if [[ $critical_errors -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ Setup completed successfully!${NC}"
  else
    echo -e "${RED}‚ùå Setup completed with ${critical_errors} error(s)${NC}"
  fi

  echo -e "\n${BLUE}=== Installation Summary ==="
  echo -e "Log file: ${LOG_FILE}"
  echo -e "Completed: $(date)${NC}"

  return $critical_errors
}

# -------------------------------
# Execution with proper logging
# -------------------------------
main
result=$?

exec 1>&3 2>&4

if [[ $result -eq 0 ]]; then
  echo -e "${GREEN}‚úÖ Success! View full log: ${LOG_FILE}${NC}"
else
  echo -e "${RED}‚ùå Completed with ${result} error(s)${NC}"
  echo -e "View errors: grep -E 'ERROR|FAIL|WARN' ${LOG_FILE}"
fi

exit $result

