# █▄▀ █▀▀ █▄█ █▄▄ █ █▄░█ █▀▄ █ █▄░█ █▀▀ █▀
# █░█ ██▄ ░█░ █▄█ █ █░▀█ █▄▀ █ █░▀█ █▄█ ▄█

# ==================== KEYBINDING CONVENTIONS ====================
# SUPER (Windows key) - Main window management
# ALT - Workspace navigation and app switching
# CTRL - Reserved for in-app shortcuts if used alone. otherwise, can be used with other modifiers. ex. SUPER + CTRL + K
# SHIFT - Modifier for alternate actions

# ==================== TIPS TO ADD NEW KEYBINDING ====================
# search the existing keybdingins
# create new binding at the below VARIABLES section
# create new binding and use this to test first:
# bindd = $mainMod, X, Test binding, exec, notify-send "Test" "this is just a test to show the keybinding is working" -t 2000

# ==================== VARIABLES ====================
$mainMod = SUPER
$HYPRSCRIPTS = ~/.config/hypr/scripts
$SCRIPTS = ~/.config/ml4w/scripts

# Vim movement keys
$vimRight = L
$vimLeft = H
$vimUp = K
$vimDown = J

# Terminal
# $term = kitty
$term = ghostty --gtk-single-instance=true

$browser = vivaldi-stable --restore-last-session --enable-features=UseOzonePlatform --ozone-platform=wayland
# $browser = chromium --enable-features=UseOzonePlatform --ozone-platform=wayland

# this the fastest way to restore tabs from history without spawning chrased pwa
# exec-once = notify-send "Chromium" "Ctrl-shift-t to restore tabs from history if chromium crashed" -t 2000 

# TODO: testing ydotool
bind = SUPER, R, exec, ydotool mousemove -w   -- 0 -1  # scrolling down
# bind = SUPER, R, exec, ydotool mousemove -w 0 100  # also scrolling up
# bind = SUPER, C, exec, ydotool mousemove --wheel -- 0 5 # FIX: . not working
bind = SUPER, C, exec, wlrctl pointer scroll 10 0
# bind = SUPER, C, exec, ydotool mousemove --wheel 5 10

# ==================== NOTIFICATION ====================
bindd = $mainMod ALT CTRL, R, Hide latest notification, exec, swaync-client --hide-latest
bindd = $mainMod ALT CTRL, N, Hide latest notification, exec, swaync-client -t

# ==================== APPLICATIONS ====================
bindd = $mainMod, T, Launch terminal, exec, $term
bindd = $mainMod, B, Launch browser, exec, $browser
# bindd = $mainMod, B, Launch browser, exec, ~/.config/ml4w/settings/browser.sh
bindd = $mainMod, E, Open file manager, exec, ~/.config/ml4w/settings/filemanager.sh
bindd = $mainMod CTRL, E, Show emoji picker, exec, ~/.config/ml4w/settings/emojipicker.sh
bindd = $mainMod CTRL, C, Open calculator, exec, ~/.config/ml4w/settings/calculator.sh
bindd = ALT, Space, Application launcher, exec, pkill rofi || rofi -show drun -replace -i
bindd = ALT, F, Toggle Floating, togglefloating

# ==================== WINDOW MANAGEMENT ====================
bindd = $mainMod, Q, Close window, killactive
bindd = $mainMod SHIFT, Q, Quit application, exec, hyprctl activewindow | grep pid | tr -d 'pid:' | xargs kill
bindd = $mainMod, F, Toggle fullscreen, fullscreen, 0
bindd = $mainMod, M, Maximize window, fullscreen, 1
bindd = $mainMod SHIFT, T, Float all windows, workspaceopt, allfloat
bindd = ALT, S, Toggle split, togglesplit # changing the window orientation of vertical or horizontal
# bindd = $mainMod, G, Toggle group, togglegroup # disable this as G is used
# bindd = $mainMod, K, Swap split, swapsplit
bindd = ALT, Tab, Cycle Next Window, cyclenext

# Window movement with mouse
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# ==================== SCREENSHOTS ====================
bind = , Print, exec, ~/.local/bin/screenshot-avif fullscreen
bind = $mainMod, Print, exec, ~/.local/bin/screenshot-avif window
bind = $mainMod, P, exec, ~/.local/bin/screenshot-avif region
bindd = $mainMod SHIFT, PRINT, Ml4W screenshot, exec, $HYPRSCRIPTS/screenshot.sh # Take a screenshot using ml4w script. usefull one are the delay for certain app that has the ui closed when typing a keybinding.

## png screenshot
# bindd = , Print, Copy screen to clipboard, exec, grim - | wl-copy && notify-send "Screenshot" "Full screen copied to clipboard!" -t 2000
# bindd = $mainMod, Print, Copy active window, exec, grim -g "$(hyprctl activewindow -j | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"')" - | wl-copy && notify-send "Screenshot" "Active window copied to clipboard!" -t 2000
# bindd = $mainMod, P, Copy selected area, exec, grim -g "$(slurp)" - | wl-copy && notify-send "Screenshot" "Region copied to clipboard!" -t 2000

# ==================== SYSTEM ====================
bindd = $mainMod CTRL, R, Reload Hyprland, exec, hyprctl reload
bindd = $mainMod, BACKSPACE, Session menu, exec, ~/.config/ml4w/scripts/wlogout.sh
bindd = $mainMod SHIFT, W, Random wallpaper, exec, waypaper --random
bindd = $mainMod CTRL SHIFT, W, Wallpaper selector, exec, waypaper
# enable it after changing the sript.
# bindd = $mainMod ALT, W, Start wallpaper automation, exec, $HYPRSCRIPTS/wallpaper-automation.sh
bindd = $mainMod ALT CTRL SHIFT, K, Show keybindings, exec, ~/.config/hypr/scripts/my-keybindings.sh
bindd = $mainMod SHIFT, B, Reload Waybar, exec, ~/.config/waybar/launch.sh
bindd = $mainMod CTRL, B, Toggle Waybar, exec, ~/.config/waybar/toggle.sh
bindd = $mainMod, V, Clipboard manager, exec, $SCRIPTS/cliphist.sh

# ==================== WORKSPACES ====================
# Workspace switching
# bindd = $mainMod, 1, Workspace 1, workspace, 1 # old binding
bindd = $mainMod, 1, Workspace 1, exec, ~/.config/hypr/scripts/toggle-workspace.sh 1
bindd = $mainMod, 2, Workspace 2, exec, ~/.config/hypr/scripts/toggle-workspace.sh 2
bindd = $mainMod, 3, Workspace 3, exec, ~/.config/hypr/scripts/toggle-workspace.sh 3
bindd = $mainMod, 4, Workspace 4, exec, ~/.config/hypr/scripts/toggle-workspace.sh 4
bindd = $mainMod, 5, Workspace 5, exec, ~/.config/hypr/scripts/toggle-workspace.sh 5
bindd = $mainMod, 6, Workspace 6, exec, ~/.config/hypr/scripts/toggle-workspace.sh 6
bindd = $mainMod, 7, Workspace 7, exec, ~/.config/hypr/scripts/toggle-workspace.sh 7
bindd = $mainMod, 8, Workspace 8, exec, ~/.config/hypr/scripts/toggle-workspace.sh 8
bindd = $mainMod, 9, Workspace 9, exec, ~/.config/hypr/scripts/toggle-workspace.sh 9
bindd = $mainMod, 0, Workspace 10, exec, ~/.config/hypr/scripts/toggle-workspace.sh 10

# move window to n workspace
# bindd = $mainMod SHIFT, 1, Move to workspace 1, movetoworkspace, 1 # old binding
bindd = ALT SHIFT, 1, Move to workspace 1, movetoworkspace, 1
bindd = ALT SHIFT, 2, Move to workspace 2, movetoworkspace, 2
bindd = ALT SHIFT, 3, Move to workspace 3, movetoworkspace, 3
bindd = ALT SHIFT, 4, Move to workspace 4, movetoworkspace, 4
bindd = ALT SHIFT, 5, Move to workspace 5, movetoworkspace, 5
bindd = ALT SHIFT, 6, Move to workspace 6, movetoworkspace, 6
bindd = ALT SHIFT, 7, Move to workspace 7, movetoworkspace, 7
bindd = ALT SHIFT, 8, Move to workspace 8, movetoworkspace, 8
bindd = ALT SHIFT, 9, Move to workspace 9, movetoworkspace, 9
bindd = ALT SHIFT, 0, Move to workspace 10, movetoworkspace, 10

# move window to next or previous workspace
bindd = ALT SHIFT, $vimRight, Move window right, movetoworkspace, r+1
bindd = ALT SHIFT, $vimLeft, Move window left, movetoworkspace, r-1

# Workspace navigation
bindd = $mainMod ALT, Tab, Next workspace, workspace, m+1
bindd = $mainMod ALT SHIFT, Tab, Previous workspace, workspace, m-1
bindd = $mainMod, mouse_down, Next workspace, workspace, e+1

# bindd = $mainMod, $vimRight, Next workspace (vim), workspace, r+1
# bindd = $mainMod, $vimLeft, Previous workspace (vim), workspace, r-1
# bindd = $mainMod, $vimDown, Open Empty Workspace, workspace, empty
bindd = $mainMod, $vimRight, Next workspace, exec, ~/.config/hypr/scripts/toggle-workspace.sh right
bindd = $mainMod, $vimLeft, Previous workspace, exec, ~/.config/hypr/scripts/toggle-workspace.sh left
bindd = $mainMod, $vimDown, Open Empty Workspace, exec, ~/.config/hypr/scripts/toggle-workspace.sh down
bindd = $mainMod, Tab, Go back and forth to previous workspace, workspace, previous # must enable this allow_workspace_cycles

# ==================== VIM-STYLE MOVEMENT ====================
# Window focus
bindd = ALT, $vimRight, Focus right, movefocus, r
bindd = ALT, $vimLeft, Focus left, movefocus, l
bindd = ALT, $vimUp, Focus up, movefocus, u
bindd = ALT, $vimDown, Focus down, movefocus, d

# Window movement (vim)
bindd = $mainMod SHIFT CTRL, $vimLeft, Move window left, movewindow, l
bindd = $mainMod SHIFT CTRL, $vimRight, Move window right, movewindow, r
bindd = $mainMod SHIFT CTRL, $vimUp, Move window up, movewindow, u
bindd = $mainMod SHIFT CTRL, $vimDown, Move window down, movewindow, d

# Window resizing (vim)
$resizeAmount = 50
bindd = $mainMod ALT SHIFT, $vimRight, Resize right, resizeactive, $resizeAmount 0
bindd = $mainMod ALT SHIFT, $vimLeft, Resize left, resizeactive, -$resizeAmount 0
bindd = $mainMod ALT SHIFT, $vimUp, Resize up, resizeactive, 0 -$resizeAmount
bindd = $mainMod ALT SHIFT, $vimDown, Resize down, resizeactive, 0 $resizeAmount

# ==================== FUNCTION KEYS ====================
bindd = , XF86MonBrightnessUp, Increase brightness, exec, brightnessctl -q s +10%
bindd = , XF86MonBrightnessDown, Decrease brightness, exec, brightnessctl -q s 10%-
bindd = , XF86AudioRaiseVolume, Increase volume, exec, pactl set-sink-volume @DEFAULT_SINK@ +5%
bindd = , XF86AudioLowerVolume, Decrease volume, exec, pactl set-sink-volume @DEFAULT_SINK@ -5%
bindd = , XF86AudioMute, Toggle mute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindd = , XF86AudioPlay, Play/pause, exec, playerctl play-pause
bindd = , XF86AudioNext, Next track, exec, playerctl next
bindd = , XF86AudioPrev, Previous track, exec, playerctl previous
bindd = , XF86AudioMicMute, Toggle microphone, exec, pactl set-source-mute @DEFAULT_SOURCE@ toggle
bindd = , XF86Lock, Lock screen, exec, hyprlock

# special workspaces
# to make special workspaces, make sure to enable the following; enabled blur, blur passes value to 0, enable blur xray, enable blur new optimizations.

$opacityValue = 0.93
$opacityDarker = 0.97

# quick-note like nvim scratchpad but in hyprland special workspace
$cl_qn = g.nt
$quicknote = ghostty --class=$cl_qn -e bash -c \"nvim $HOME/jho-notes/quick-note.md\"
$ws_qn = nt
bindd = $mainMod, N, Toggle Quick-note Workspace, exec, ~/.config/hypr/scripts/toggle-special-workspace.sh "$quicknote" "$cl_qn" "$ws_qn"
windowrulev2 = workspace special:$ws_qn silent, class:^($cl_qn)$
windowrulev2 = opacity $opacityValue $opacityValue, class:^($cl_qn)$
exec-once = ghostty --class=$cl_qn -e bash -c "nvim $HOME/jho-notes/quick-note.md"

# pop-up terminal for general use
$class_and_sws_tm = tm
$ex_term = kitty --class tm gen-tmux-ses term
bindd = $mainMod, I, Config terminal, exec, ~/.config/hypr/scripts/toggle-special-workspace.sh "$ex_term" "$class_and_sws_tm" "$class_and_sws_tm"
windowrulev2 = workspace special:$class_and_sws_tm silent, class:^($class_and_sws_tm)$
windowrulev2 = opacity $opacityValue $opacityValue, class:^($class_and_sws_tm)$
# exec-once = $ex_conf

# terminal for config and dotfiles
$class_and_sws_cf = cf
$ex_conf = kitty --class cf gen-tmux-ses conf
bindd = $mainMod, O, Config terminal, exec, ~/.config/hypr/scripts/toggle-special-workspace.sh "$ex_conf" "$class_and_sws_cf" "$class_and_sws_cf"
windowrulev2 = workspace special:$class_and_sws_cf silent, class:^($class_and_sws_cf)$
windowrulev2 = opacity $opacityValue $opacityValue, class:^($class_and_sws_cf)$
# exec-once = $ex_conf

# ghostty terminal for taskwarrior-tui
bindd = $mainMod, W, Toggle pop-up terminal, exec, ~/.config/hypr/scripts/toggle-special-workspace.sh "ghostty --class=g.t -e taskwarrior-tui" "g.t" "tt"
windowrulev2 = workspace special:tt silent, class:^(g.t)$
windowrulev2 = opacity $opacityValue $opacityValue, class:^(g.t)$
exec-once = ghostty --class=g.t -e taskwarrior-tui

# ai apps
$vivaldi_chatgpt = vivaldi --enable-features=UseOzonePlatform --ozone-platform=wayland --app=https://chatgpt.com
$vivaldi_deepseek = vivaldi --enable-features=UseOzonePlatform --ozone-platform=wayland --app=https://chat.deepseek.com
$cl_gpt = vivaldi-chatgpt.com__-Default
$cl_ds = vivaldi-chat.deepseek.com__-Default
$ws_ai = ai
bindd = $mainMod, Return, Toggle Ai Apps, exec, ~/.config/hypr/scripts/toggle-special-workspace.sh "$vivaldi_chatgpt" "$cl_gpt" "$ws_ai"
windowrulev2 = workspace special:ai silent, class:^($cl_gpt)$
windowrulev2 = workspace special:ai silent, class:^($cl_ds)$
windowrulev2 = fullscreenstate:1 1, class:^($cl_gpt)$
windowrulev2 = opacity 0.95 0.95, class:^($cl_gpt)$
windowrulev2 = opacity 0.95 0.95, class:^($cl_ds)$
exec-once = $vivaldi_chatgpt
exec-once = $vivaldi_deepseek 

# kitty terminal for slumber http client
$kitty_slumber = kitty --class slm slumber -f /home/jho/work/sync-work/slumber-http/slumber.yml
bindd = $mainMod, Space, Slumber http client, exec, ~/.config/hypr/scripts/toggle-special-workspace.sh "$kitty_slumber" "slm" "slm"
windowrulev2 = workspace special:slm silent, class:^(slm)$
windowrulev2 = opacity $opacityValue $opacityValue, class:^(slm)$
exec-once = $kitty_slumber 

# kitty terminal for lazysql
$kitty_lazysql = kitty --class lsql lazysql
bindd = $mainMod, S, Lazysql, exec, ~/.config/hypr/scripts/toggle-special-workspace.sh "$kitty_lazysql
windowrulev2 = workspace special:lsql silent, class:^(lsql)$
windowrulev2 = opacity $opacityValue $opacityValue, class:^(lsql)$
exec-once = $kitty_lazysql

# TODO: create new bind for 'u' 'o' and 'y'

# NOTE: exec examples
# bindd = $mainMod, Z, ChatGpt, exec, [workspace 2 silent; tile] google-chrome-stable --app=https://www.chatgpt.com # example of using exec rules
# hyprctl dispatch workspace 2 && hyprctl dispatch layoutmsg tiling && google-chrome-stable --app=https://www.chatgpt.com & # command line equivalent

# FIX: move this to other conf?
misc {
  # ex. go to browser when an app needs to open a link.
  # focus_on_activate = true # already active in ml4w custom config
}


input {
  # keyboard repeat delay and rate
  repeat_delay = 400
  repeat_rate = 50
}

# Cursor submap (similar to the Mouse mode in Sway)
submap=cursor

# Jump cursor to a position
bind= ,a,exec,hyprctl dispatch submap reset && wl-kbptr && hyprctl dispatch submap cursor

# Cursor movement
# binde=,j,exec,wlrctl pointer move 0 10
# binde=,k,exec,wlrctl pointer move 0 -10
# binde=,l,exec,wlrctl pointer move 10 0
# binde=,h,exec,wlrctl pointer move -10 0

binde= ,j,exec,wlrctl pointer move 0 20
binde= ,k,exec,wlrctl pointer move 0 -20
binde= ,l,exec,wlrctl pointer move 20 0
binde= ,h,exec,wlrctl pointer move -20 0

# Cursor movement
binde=Shift,j,exec,wlrctl pointer move 0 100
binde=Shift,k,exec,wlrctl pointer move 0 -100
binde=Shift,l,exec,wlrctl pointer move 100 0
binde=Shift,h,exec,wlrctl pointer move -100 0

# Left button
bind= ,s,exec,wlrctl pointer click left
# Middle button
bind= ,d,exec,wlrctl pointer click middle
# Right button +list-actions
bind= ,f,exec,wlrctl pointer click right

# FIX: scroll i snot working
# Scroll up and down
binde= ,e,exec,wlrctl pointer scroll 10 0
binde= ,r,exec,wlrctl pointer scroll -10 0

# Scroll left and right
binde= ,t,exec,wlrctl pointer scroll 0 -10
binde= ,g,exec,wlrctl pointer scroll 0 10

# Exit cursor submap
# If you do not use cursor timeout or cursor:hide_on_key_press, you can delete its respective cals
bind= ,escape,exec,hyprctl keyword cursor:inactive_timeout 3; hyprctl keyword cursor:hide_on_key_press true; hyprctl dispatch submap reset 

submap = reset

# Entrypoint
# If you do not use cursor timeout or cursor:hide_on_key_press, you can delete its respective cals
bindd = $mainMod SHIFT, G, Go into mouse mode, exec, hyprctl keyword cursor:inactive_timeout 0; hyprctl keyword cursor:hide_on_key_press false; hyprctl dispatch submap cursor
bindd = $mainMod , G, Spawn cursor, exec, hyprctl dispatch submap reset && wl-kbptr && hyprctl dispatch submap cursor

# ws 1. browser
windowrulev2 = workspace 1, class:^(firefox)$
windowrulev2 = workspace 1, class:^(google-chrome-stable)$
windowrulev2 = workspace 1, class:^(google-chrome)$
windowrulev2 = workspace 1, class:^(chromium)$
windowrulev2 = workspace 1, class:^(vivaldi-stable)$
exec-once = $browser

# ws 2. terminal emulator
windowrulev2 = workspace 2, class:^(com.mitchellh.ghostty)$
windowrulev2 = opacity $opacityValue $opacityValue,class:^(com.mitchellh.ghostty)$
# windowrulev2 = opacity $opacityDarker $opacityDarker,class:^(com.mitchellh.ghostty)$
# why there are two? the first one is to make ghostty to not super slow when spawn new app again. second is to open it and run tmux.
exec-once = ghostty --gtk-single-instance=true --quit-after-last-window-closed=false --initial-window=false
exec-once = ghostty --gtk-single-instance=true -e bash -c "$HOME/.local/bin/gen-tmux-ses work"
# exec-once = ghostty --gtk-single-instance=true -e start-tmux-work # does not work as current os shell is bash.

windowrulev2 = workspace 2, class:^(kitty)$
windowrulev2 = opacity $opacityValue $opacityValue,class:^(kitty)$

windowrulev2 = workspace 2, class:^(wezterm)$
windowrulev2 = opacity $opacityValue $opacityValue,class:^(wezterm)$

# ws 3. other work apps
windowrulev2 = workspace 3, class:^(RedisInsight)$
windowrulev2 = opacity $opacityValue $opacityValue,class:^(RedisInsight)$

windowrulev2 = workspace 3, class:^(DBeaver)$
windowrulev2 = opacity $opacityValue $opacityValue,class:^(DBeaver)$

windowrulev2 = workspace 3, class:^(Postman)$
windowrulev2 = opacity $opacityDarker $opacityDarker,class:^(Postman)$
# exec-once = postman

# ws 4. messanger, etc
windowrulev2 = workspace 4, class:^(Slack)$
windowrulev2 = opacity $opacityDarker $opacityDarker,class:^(Slack)$
exec-once = slack

windowrulev2 = workspace 4, class:^(chrome-teams.live.com__-Default)$
windowrulev2 = opacity $opacityDarker $opacityDarker, class:^(chrome-teams.live.com__-Default)$
windowrulev2 = workspace 4, class:^(vivaldi-teams.live.com__-Default)$
windowrulev2 = opacity $opacityDarker $opacityDarker, class:^(vivaldi-teams.live.com__-Default)$
# exec-once = chromium --enable-features=UseOzonePlatform --ozone-platform=wayland --app=https://teams.live.com

windowrulev2 = workspace 4, class:^(org.telegram.desktop)$
windowrulev2 = opacity $opacityValue $opacityValue,class:^(org.telegram.desktop)$

windowrulev2 = workspace 4, class:^(obsidian)$
windowrulev2 = opacity $opacityValue $opacityValue,class:^(obsidian)$

# NOTE: dont enable this for any explorer gui as it is needed when drop and drag with other gui or any other use case.
# windowrulev2 = workspace 4, class:^(org.gnome.Nautilus)$
# windowrulev2 = workspace 4, class:^(org.kde.dolphin)$

# ws 5. other less important apps
windowrulev2 = workspace 5, class:^(org.gnome.Lollypop)$
windowrulev2 = opacity $opacityValue $opacityValue,class:^(org.gnome.Lollypop)$
exec-once = lollypop

# exec-shutdown = pkill -f chromium

general {
  # make the new window to spawn on the right side of the screen and become smaller if added more. 
  # the current window is the master and the smaller ones are slave
  layout = master 
}

 # FIX: . move to layout? create new layout file?
#
# TODO: add more binds config here and not from ml4w settings.
binds {
  # this is to make hyprland to not go to previous workspace when repeat change workspace.
  workspace_back_and_forth = false
  allow_workspace_cycles = true
  pass_mouse_when_bound = false
}

