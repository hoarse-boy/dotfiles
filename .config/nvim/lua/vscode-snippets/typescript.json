{"pg error iwl-v2 (store func err)":{"body":["\/\/ DEL: this is not for http handler func","if (error instanceof AppError) {","  throw error;","}","","console.error(\"${1:funcName} failed:\", error);","throw new AppError(\"${2:serviceError}\", \"${3:message if needed, like failed to fetch data}\");"],"prefix":"pg error iwl-v2 (catch store func err)"},"catch http handler err":{"body":["} catch (error: unknown) {","  console.error(error);","  context.response.status = ${1:400};","  context.response.body = new ${2:HttpResponse}(${1:400}, \"${3:msg}\", null);","  return;","}"],"prefix":"catch http handler err"},"ignore fmt deno (line)":{"body":"\/\/ deno-fmt-ignore","prefix":"ignore fmt deno (line)"},"ignore fmt deno (top of the file)":{"body":"\/\/ deno-fmt-ignore-file","prefix":"ignore fmt deno (top of the file)"},"enum (type safe enum)":{"body":["export const ${1:const object} = {","  ${2:key}: ${3:key's value},","} as const;","export type ${1:} = typeof ${1:}[keyof typeof ${1:}];"],"prefix":"enum (type safe enum \/ const object)"},"todo comment":{"body":"\/\/ TODO: ${1:} ","prefix":"todo comment"},"jsdoc":{"body":["\/**"," * ${1:description}"," *\/"],"prefix":"jsdoc"},"note":{"body":"\/\/ NOTE: ${1:}","prefix":"note"},"log_del":{"prefix":"fmt_del_log","body":["\/\/ DEL: delete below log later","console.log(\"--------------------------------------------------------\", Deno.inspect(${1:}, { depth: Infinity }), \"${1:} -------------------------------------------------------- \"); \/\/ DEL: delete later"]},"fix":{"body":"\/\/ FIX: ${1:}","prefix":"fix"},"handler func (oak)":{"body":["import { Context } from \"@oak\/oak\";","","export async function ${1:func}Handler(context: Context) {","\ttry {","    ${2:code}","  } catch (error) {","    \/\/ FIX: change this","\t\tconsole.error(error);","\t\tcontext.response.status = 500;","\t\tcontext.response.body = new HttpResponse(1, \"server error\", null);","\t\treturn;","\t}","}"],"prefix":"handler func (http) (oak)"},"oak path param":{"body":["import { RouterContext } from \"@oak\/oak\/router\";","","\/\/ DEL: this is for endpoint like \/account\/:id","\t${1:funcName}: async (context: RouterContext<string>) => {","\t\t\tconst id = context.params.id;","}"],"prefix":"oak path param"},"handler err for iwl v2":{"body":["\/\/ DEL. this is for handler function only","if (error instanceof AppError) {","  context.response.status = error.httpStatusCode;","  context.response.body = { errorCode: error.errorCode, errorMessage: error.message };","  return;","}","","console.error(\"Unhandled error:\", error);","context.response.status = 500;","context.response.body = { errorCode: ErrorCode.PAYMENT_SERVICE_ERROR.code, errorMessage: \"INTERNAL_SERVER_ERROR\" };"],"prefix":"handler err for iwl v2"}}