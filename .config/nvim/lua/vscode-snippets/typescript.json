{"ignore prettier (code block)":{"body":"\/* prettier-ignore *\/","prefix":"ignore prettier (code block)"},"oak path param":{"body":["import { RouterContext } from \"@oak\/oak\/router\";","","\/\/ DEL: this is for endpoint like \/account\/:id","\t${1:funcName}: async (context: RouterContext<string>) => {","\t\t\tconst id = context.params.id;","}"],"prefix":"oak path param"},"ignore fmt deno (top of the file)":{"body":"\/\/ deno-fmt-ignore-file","prefix":"deno fmt deno (top of the file)"},"ignore fmt deno (line)":{"prefix":"deno fmt ignore (line)","body":"\/\/ deno-fmt-ignore"},"handler func (oak)":{"body":["import { Context } from \"@oak\/oak\";","","export async function ${1:func}Handler(context: Context) {","\ttry {","    ${2:code}","  } catch (error) {","    \/\/ FIX: change this","\t\tconsole.error(error);","\t\tcontext.response.status = 500;","\t\tcontext.response.body = new HttpResponse(1, \"server error\", null);","\t\treturn;","\t}","}"],"prefix":"handler func (http) (oak)"},"log_del":{"body":["\/\/ DEL: delete below log later","console.log(\"--------------------------------------------------------\", Deno.inspect(${1:}, { depth: Infinity }), \"${1:} -------------------------------------------------------- \"); \/\/ DEL: delete later"],"prefix":"fmt_del_log"},"fix":{"body":"\/\/ FIX: ${1:}","prefix":"fix"},"handler err for iwl v2":{"prefix":"handler err for iwl v2","body":["\/\/ FIX: . this is for handler function only","if (error instanceof AppError) {","    context.response.status = error.httpStatusCode","    context.response.body = {","        errorCode: error.errorCode,","        errorMessage: error.message,","    }","    return","}","","console.error('Unhandled error:', error)","context.response.status = 500","context.response.body = {","    errorCode: PaymentServiceError.errorCode,","    errorMessage: 'INTERNAL_SERVER_ERROR',","}"]},"note":{"body":"\/\/ NOTE: ${1:}","prefix":"note"},"pg error iwl-v2 (store func err)":{"body":["\/\/ DEL: this is not for http handler func","if (error instanceof AppError) {","  throw error;","}","","console.error(\"${1:funcName} failed:\", error);","throw PaymentServiceError \/\/ FIX: . import first and check other error"],"prefix":"pg error iwl-v2 (catch store func err)"},"ignore prettier (line)":{"body":"\/\/ prettier-ignore","prefix":"ignore prettier (line)"},"todo comment":{"body":"\/\/ TODO: ${1:} ","prefix":"todo"},"enum (type safe enum)":{"body":["export const ${1:const object} = {","  ${2:key}: ${3:key's value},","} as const;","export type ${1:} = typeof ${1:}[keyof typeof ${1:}];"],"prefix":"enum (type safe enum \/ const object)"},"jsdoc":{"body":["\/**"," * ${1:description}"," *\/"],"prefix":"jsdoc"}}